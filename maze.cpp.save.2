#include<iostream>
#include<fstream>
#include<cstring>
#include<list>
#include<cstdlib>
#include<thread>
#include<chrono>
#include <windows.h>



class maze{

private:
int map[21*12];
char shareMap[21*12];
int pose;
int oldPose;
int visits[21*12] = {0};

public:
maze(std::string nomFichier);
void mapTrans();
void deplacement();
int getPose();
friend std:: ostream& operator <<(std::ostream& os, const maze& m); 
};

using namespace::std;

maze::maze( string nomFichier){
ifstream f ("maze.txt");
pose = 1;
int i = 0;

for (i=0; i < 21*12; i++){
	f >> map[i];

}

f.close();
};

int maze::getPose(){
return pose;
}


void maze::deplacement(){

//oldPose = pose
list<int> randSet;
if (pose + 1 < 21*12 && (map[pose + 1] == 0 || map[pose +1] == 3)) randSet.push_back(pose + 1);
cout<< pose<<endl;
if (pose - 1 >= 0 && map[pose - 1] == 0) randSet.push_back(pose - 1);
if (pose + 21 < 21*12 && (map[pose + 21] == 0 || map[pose + 21] == 3)) randSet.push_back(pose + 21);
if (pose - 21 >= 0 && map[pose - 21] == 0) randSet.push_back(pose -21);

        if (!randSet.empty()){
                 int index = std::rand() % randSet.size();
		 auto it = randSet.begin();
		 advance(it, index);
		 oldPose = pose;
		 pose = *it;
		 visits[pose]++;
                 //shareMap[pose] = '@';
		 cout<< shareMap[pose];
		 //shareMap[oldPose] = ' ';
                 shareMap[1] = 'A';
		  mapTrans();  

}
}



void maze::mapTrans(){
/*int i = 0;
for (i = 0; i < 21*12; i++){
	if (map[i] == 1) shareMap[i] ='N';
	if (i < 21*12 -1 && map[i] == 1 && map[i-1] == 1 && map[i+1] == 1) shareMap[i] = 'M';
	if (map[i] == 2) shareMap[i] = '@';
	if (map[i] == 3) shareMap[i] = '3';
	    if (map[i] == 0) {
        if (visits[i] >= 20)
            shareMap[i] = 'O';
        else if (visits[i] >= 10)
            shareMap[i] = 'o';
        else if (visits[i] > 0)
            shareMap[i] = '.';
        else
            shareMap[i] = ' ';  // jamais visit√©
    }

}
*/
for (int i = 0; i < 21 * 12; i++) {
        if (map[i] == 1) {
            shareMap[i] = 'N';  // mur
        }
        else if (map[i] == 3) {
            shareMap[i] = '3';  // objectif ?
        }
        else if (i == pose) {
            shareMap[i] = '@';  // position actuelle
        }
        else if (map[i] == 0) {
            if (visits[i] >= 20)
                shareMap[i] = 'O';
            else if (visits[i] >= 10)
                shareMap[i] = 'o';
            else if (visits[i] > 0)
                shareMap[i] = '.';
            else
                shareMap[i] = ' ';
        }
    }
}





ostream& operator << (ostream& os, const maze& m) 
{
int j;
for (j = 0; j < 21*12; j++ ){
	
	if ( j % 21 ==0 && j != 0 ) cout<<endl;
	
	os << m.shareMap[j]<<" ";}
return os;}

int main(){

SetConsoleOutputCP(CP_UTF8);
string emoji = u8"üòÉ";
cout << "Emoji test : " << emoji << std::endl;

srand(10);
maze m("maze.txt");
m.mapTrans();
cout<<m<<endl;
//m.deplacement();

while (m.getPose() != 250) {
    // 1. Effacer l‚Äô√©cran
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif

    // 2. D√©placer le joueur
    m.deplacement();

    // 3. Afficher le labyrinthe
    std::cout << m << std::endl;

    // 4. Petite pause pour ralentir la boucle
    std::this_thread::sleep_for(std::chrono::milliseconds(50));
}

return 0;
}
